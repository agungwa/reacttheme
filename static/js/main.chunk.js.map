{"version":3,"file":"static/js/main.chunk.js","sources":["E:/laragon/www/wordpress/wp-content/themes/reacttheme/react-src/src/App.js","E:/laragon/www/wordpress/wp-content/themes/reacttheme/react-src/src/components/Home.js","E:/laragon/www/wordpress/wp-content/themes/reacttheme/react-src/src/components/HomeItem.js","E:/laragon/www/wordpress/wp-content/themes/reacttheme/react-src/src/components/css/home.css","E:/laragon/www/wordpress/wp-content/themes/reacttheme/react-src/src/index.css","E:/laragon/www/wordpress/wp-content/themes/reacttheme/react-src/src/index.js","E:/laragon/www/wordpress/wp-content/themes/reacttheme/react-src/src/logo.svg","E:/laragon/www/wordpress/wp-content/themes/reacttheme/react-src/src/serviceWorker.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport Home from './components/Home';\r\n\r\n\r\nclass App extends Component{\r\n    render(){\r\n        return (\r\n            <div className=\"App\">\r\n                <Home />\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from \"react\"\r\nimport HomeItem from './HomeItem'\r\nimport logo from \"./../logo.svg\"\r\nimport \"./css/home.css\"\r\n\r\nexport default class Home extends Component {\r\n    state = {\r\n        home: [],\r\n        isLoaded: false\r\n    }\r\n\r\n    componentDidMount(){\r\n        return fetch('/wp-json/wp/v2/posts')\r\n        .then((response) => response.json())\r\n        .then((responseJson)=>{\r\n            this.setState({ home: responseJson, \r\n                isLoaded: true});\r\n        })\r\n        .catch((error) => {\r\n            console.error(error);\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n     const { home, isLoaded } = this.state;\r\n     if(isLoaded){\r\n        return(\r\n            <div className=\"App\">\r\n              <header className=\"App-header\">\r\n                  <p>Postingan</p>\r\n              <img src={logo } className=\"App-logo\" alt=\"logo\" />\r\n                    { home.map(home => (\r\n                                <HomeItem key={ home.id } home={home}/>\r\n                                \r\n                            )) }\r\n                </header>\r\n            </div>\r\n        );\r\n    }\r\n        return <h3>  Loading</h3>\r\n\r\n     }\r\n    \r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\n\r\nexport default class HomeItem extends Component {\r\n    state = {\r\n        imgUrl: '',\r\n        author: '',\r\n        isLoaded: false,\r\n    }\r\n    static propType = {\r\n        home : PropTypes.object.isRequired\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { featured_media, author } = this.props.home;\r\n        \r\n        console.log({author})\r\n        const getImageUrl = axios.get('/wp-json/wp/v2/media/',{featured_media});\r\n        const getAuthor = axios.get('/wp-json/wp/v2/users/',{author});\r\n\r\n        Promise.all([getImageUrl, getAuthor])\r\n        .then(res => {\r\n        //    console.log(res[1]);\r\n            this.setState({\r\n                imgUrl: res[0].data.media_details.sizes.thumbnail.source_url,\r\n                author: res[1].data.name,\r\n                isLoaded: true\r\n            });\r\n            \r\n        });\r\n    }\r\n    render() {\r\n        const { title, excerpt} = this.props.home;\r\n        // const { author, imgUrl, isLoaded } = this.state;\r\n        \r\n        return (\r\n            // console.log(imgUrl),\r\n            <div>\r\n                <h2 style={{ marginBottom: '0' }}>{ title.rendered}</h2>\r\n               \r\n                <div dangerouslySetInnerHTML={{ __html: excerpt.rendered }} />\r\n            </div>\r\n        );\r\n      \r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AARA;AACA;AAWA;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;;AAEA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AADA;AACA;AAKA;AACA;AAGA;AAAA;AACA;AADA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAtCA;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AADA;AACA;AASA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AACA;AA1CA;AAAA;AAOA;AADA;;;;;;;;;;;ACVA;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;;;;;;;;;;;AChBA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AAKA;AACA,eA8BA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;A","sourceRoot":""}